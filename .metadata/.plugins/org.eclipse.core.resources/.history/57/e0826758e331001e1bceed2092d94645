package test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Deque;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class Recently_Played_Store {

	
	private int initialCapacity;
    private Map<String, Deque<String>> userSongsMap;

    public Recently_Played_Store(int initialCapacity) {
        this.initialCapacity = initialCapacity;
        this.userSongsMap = new HashMap<>();
    }

    public void addRecentlyPlayedSong(String user, String song) {
        try {
            if (!userSongsMap.containsKey(user)) {
                userSongsMap.put(user, new LinkedList<>());
            }

            Deque<String> songsList = userSongsMap.get(user);

            // If the song is already played by the user, remove it from the list to update its position
            songsList.remove(song);

            // Add the new song to the front of the list
            songsList.addFirst(song);

            // If the list exceeds the capacity, remove the least recently played song
            if (songsList.size() > initialCapacity) {
                songsList.removeLast();
            }
        } catch (Exception e) {
            // Handle the exception here or print the error message
            e.printStackTrace();
        }
        
    }
 // Method to reverse the list
    public static List<String> reverseList(List<String> list) {
        try {
            Collections.reverse(list);
        } catch (NullPointerException e) {
            // Handle the case when the input list is null
            System.err.println("Error: Input list is null.");
        } catch (UnsupportedOperationException e) {
            // Handle the case when the input list is immutable and cannot be reversed
            System.err.println("Error: Cannot reverse an immutable list.");
        } catch (Exception e) {
            // Handle other possible exceptions
            System.err.println("Error: An unexpected error occurred: " + e.getMessage());
        }
        return list;
    }

    public List<String> getRecentlyPlayedSongs(String user) {
        try {
            return (List<String>) userSongsMap.getOrDefault(user, new LinkedList<>());
            
        } catch (Exception e) {
            // Handle the exception here or print the error message
            e.printStackTrace();
            return new LinkedList<>();
        }
}
}
